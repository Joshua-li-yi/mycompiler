lno@0  @79  NODE PROG    children:[@1 ]
lno@64  @1  main    children:[@0 @5 @8 @11 @14 @15 @78 ]
lno@64  @0  NODE TYPE  void  children:[]
lno@66  @5  NODE STMT  STMT DECL  children:[@3 @2 @4 ]
lno@66  @3  NODE TYPE  int  children:[]
lno@66  @2  NODE VAR  var name: a  children:[]
lno@66  @4  NODE VAR  var name: s  children:[]
lno@67  @8  NODE STMT  =  children:[@6 @7 ]
lno@67  @6  NODE VAR  var name: a  children:[]
lno@67  @7  NODE CONST  int: 10  children:[]
lno@68  @11  NODE STMT  =  children:[@9 @10 ]
lno@68  @9  NODE VAR  var name: s  children:[]
lno@68  @10  NODE CONST  int: 0  children:[]
lno@69  @14  NODE STMT  STMT DECL  children:[@13 @12 ]
lno@69  @13  NODE TYPE  char  children:[]
lno@69  @12  NODE VAR  var name: ch  children:[]
lno@70  @15  NODE STMT  scanf  children:[@16 @19 ]
lno@70  @16  NODE CONST  string:   children:[]
lno@70  @19  NODE CONST  &:   children:[@18 ]
lno@70  @18  NODE VAR  var name: ch  children:[]
lno@70  @78  NODE STMT  STMT WHILE  children:[@27 @40 @43 @46 @49 @77 ]
lno@71  @27  NODE EXPR  OP: ||  children:[@23 @33 ]
lno@71  @23  NODE EXPR  OP: &&  children:[@21 @25 ]
lno@71  @21  NODE EXPR  OP: >  children:[@20 @22 ]
lno@71  @20  NODE VAR  var name: a  children:[]
lno@71  @22  NODE CONST  int: 0  children:[]
lno@71  @25  NODE EXPR  OP: <=  children:[@24 @26 ]
lno@71  @24  NODE VAR  var name: a  children:[]
lno@71  @26  NODE CONST  int: 10  children:[]
lno@71  @33  NODE EXPR  OP: &&  children:[@31 @36 ]
lno@71  @31  NODE EXPR  OP: ==  children:[@29 @32 ]
lno@71  @29  NODE EXPR  OP: %  children:[@28 @30 ]
lno@71  @28  NODE VAR  var name: a  children:[]
lno@71  @30  NODE CONST  int: 100  children:[]
lno@71  @32  NODE CONST  int: 10  children:[]
lno@71  @36  NODE EXPR  OP: ==  children:[@34 @37 ]
lno@71  @34  NODE EXPR  OP: !  children:[@35 ]
lno@71  @35  NODE VAR  var name: a  children:[]
lno@71  @37  NODE CONST  int: 10  children:[]
lno@73  @40  NODE STMT  -=  children:[@38 @39 ]
lno@73  @38  NODE VAR  var name: a  children:[]
lno@73  @39  NODE CONST  int: 1  children:[]
lno@74  @43  NODE STMT  STMT DECL  children:[@42 @41 ]
lno@74  @42  NODE TYPE  int  children:[]
lno@74  @41  NODE VAR  var name: a  children:[]
lno@75  @46  NODE STMT  =  children:[@44 @45 ]
lno@75  @44  NODE VAR  var name: a  children:[]
lno@75  @45  NODE CONST  int: 10  children:[]
lno@76  @49  NODE STMT  +=  children:[@47 @48 ]
lno@76  @47  NODE VAR  var name: s  children:[]
lno@76  @48  NODE VAR  var name: a  children:[]
lno@76  @77  NODE STMT  STMT IF  children:[@52 @55 @60 @63 @76 ]
lno@77  @52  NODE EXPR  OP: <  children:[@50 @53 ]
lno@77  @50  NODE EXPR  OP: -  children:[@51 ]
lno@77  @51  NODE VAR  var name: s  children:[]
lno@77  @53  NODE EXPR  OP: -  children:[@54 ]
lno@77  @54  NODE CONST  int: 10  children:[]
lno@79  @55  NODE STMT  printf  children:[@56 @57 ]
lno@79  @56  NODE CONST  string:   children:[]
lno@79  @57  NODE VAR  var name: s  children:[]
lno@80  @60  NODE STMT  STMT DECL  children:[@59 @58 ]
lno@80  @59  NODE TYPE  int  children:[]
lno@80  @58  NODE VAR  var name: b  children:[]
lno@81  @63  NODE STMT  =  children:[@61 @62 ]
lno@81  @61  NODE VAR  var name: b  children:[]
lno@81  @62  NODE CONST  int: 10  children:[]
lno@81  @76  NODE STMT  STMT FOR  children:[@67 @69 @72 @73 ]
lno@82  @67  NODE STMT  STMT DECL  children:[@65 @64 @66 ]
lno@82  @65  NODE TYPE  int  children:[]
lno@82  @64  NODE VAR  var name: i  children:[]
lno@82  @66  NODE CONST  int: 0  children:[]
lno@82  @69  NODE EXPR  OP: <  children:[@68 @70 ]
lno@82  @68  NODE VAR  var name: i  children:[]
lno@82  @70  NODE VAR  var name: b  children:[]
lno@82  @72  NODE EXPR  OP: ++  children:[@71 ]
lno@82  @71  NODE VAR  var name: i  children:[]
lno@84  @73  NODE STMT  printf  children:[@74 @75 ]
lno@84  @74  NODE CONST  string:   children:[]
lno@84  @75  NODE VAR  var name: i  children:[]
