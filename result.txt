lno@0  @82  NODE PROG    children:[@1 ]
lno@64  @1  main    children:[@0 @5 @8 @11 @14 @20 @81 ]
lno@64  @0  NODE TYPE  void  children:[]
lno@66  @5  NODE STMT  STMT DECL  children:[@2 @3 @4 ]
lno@66  @2  NODE TYPE  int  children:[]
lno@66  @3  NODE VAR  var name: a  children:[]
lno@66  @4  NODE VAR  var name: s  children:[]
lno@67  @8  NODE STMT  =  children:[@6 @7 ]
lno@67  @6  NODE VAR  var name: a  children:[]
lno@67  @7  NODE CONST  int: 10  children:[]
lno@68  @11  NODE STMT  =  children:[@9 @10 ]
lno@68  @9  NODE VAR  var name: s  children:[]
lno@68  @10  NODE CONST  int: 0  children:[]
lno@69  @14  NODE STMT  STMT DECL  children:[@12 @13 ]
lno@69  @12  NODE TYPE  char  children:[]
lno@69  @13  NODE VAR  var name: ch  children:[]
lno@70  @20  NODE STMT  STMT FUN CALL  children:[@15 @16 @19 ]
lno@70  @15  NODE VAR  var name: scanf  children:[]
lno@70  @16  NODE CONST  string:   children:[]
lno@70  @19  NODE CONST  &:   children:[@18 ]
lno@70  @18  NODE VAR  var name: ch  children:[]
lno@70  @81  NODE STMT  STMT WHILE  children:[@28 @41 @44 @47 @50 @80 ]
lno@71  @28  NODE EXPR  OP: ||  children:[@24 @34 ]
lno@71  @24  NODE EXPR  OP: &&  children:[@22 @26 ]
lno@71  @22  NODE EXPR  OP: >  children:[@21 @23 ]
lno@71  @21  NODE VAR  var name: a  children:[]
lno@71  @23  NODE CONST  int: 0  children:[]
lno@71  @26  NODE EXPR  OP: <=  children:[@25 @27 ]
lno@71  @25  NODE VAR  var name: a  children:[]
lno@71  @27  NODE CONST  int: 10  children:[]
lno@71  @34  NODE EXPR  OP: &&  children:[@32 @37 ]
lno@71  @32  NODE EXPR  OP: ==  children:[@30 @33 ]
lno@71  @30  NODE EXPR  OP: %  children:[@29 @31 ]
lno@71  @29  NODE VAR  var name: a  children:[]
lno@71  @31  NODE CONST  int: 100  children:[]
lno@71  @33  NODE CONST  int: 10  children:[]
lno@71  @37  NODE EXPR  OP: ==  children:[@35 @38 ]
lno@71  @35  NODE EXPR  OP: !  children:[@36 ]
lno@71  @36  NODE VAR  var name: a  children:[]
lno@71  @38  NODE CONST  int: 10  children:[]
lno@73  @41  NODE STMT  -=  children:[@39 @40 ]
lno@73  @39  NODE VAR  var name: a  children:[]
lno@73  @40  NODE CONST  int: 1  children:[]
lno@74  @44  NODE STMT  STMT DECL  children:[@42 @43 ]
lno@74  @42  NODE TYPE  int  children:[]
lno@74  @43  NODE VAR  var name: a  children:[]
lno@75  @47  NODE STMT  =  children:[@45 @46 ]
lno@75  @45  NODE VAR  var name: a  children:[]
lno@75  @46  NODE CONST  int: 10  children:[]
lno@76  @50  NODE STMT  +=  children:[@48 @49 ]
lno@76  @48  NODE VAR  var name: s  children:[]
lno@76  @49  NODE VAR  var name: a  children:[]
lno@76  @80  NODE STMT  STMT IF  children:[@53 @59 @62 @65 @79 ]
lno@77  @53  NODE EXPR  OP: <  children:[@51 @54 ]
lno@77  @51  NODE EXPR  OP: -  children:[@52 ]
lno@77  @52  NODE VAR  var name: s  children:[]
lno@77  @54  NODE EXPR  OP: -  children:[@55 ]
lno@77  @55  NODE CONST  int: 10  children:[]
lno@79  @59  NODE STMT  STMT FUN CALL  children:[@56 @57 @58 ]
lno@79  @56  NODE VAR  var name: printf  children:[]
lno@79  @57  NODE CONST  string:   children:[]
lno@79  @58  NODE VAR  var name: s  children:[]
lno@80  @62  NODE STMT  STMT DECL  children:[@60 @61 ]
lno@80  @60  NODE TYPE  int  children:[]
lno@80  @61  NODE VAR  var name: b  children:[]
lno@81  @65  NODE STMT  =  children:[@63 @64 ]
lno@81  @63  NODE VAR  var name: b  children:[]
lno@81  @64  NODE CONST  int: 10  children:[]
lno@81  @79  NODE STMT  STMT FOR  children:[@69 @71 @74 @78 ]
lno@82  @69  NODE STMT  STMT DECL  children:[@66 @67 @68 ]
lno@82  @66  NODE TYPE  int  children:[]
lno@82  @67  NODE VAR  var name: i  children:[]
lno@82  @68  NODE CONST  int: 0  children:[]
lno@82  @71  NODE EXPR  OP: <  children:[@70 @72 ]
lno@82  @70  NODE VAR  var name: i  children:[]
lno@82  @72  NODE VAR  var name: b  children:[]
lno@82  @74  NODE EXPR  OP: ++  children:[@73 ]
lno@82  @73  NODE VAR  var name: i  children:[]
lno@84  @78  NODE STMT  STMT FUN CALL  children:[@75 @76 @77 ]
lno@84  @75  NODE VAR  var name: printf  children:[]
lno@84  @76  NODE CONST  string:   children:[]
lno@84  @77  NODE VAR  var name: i  children:[]
