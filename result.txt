lno@0  @0  NODE PROG    children:[@1 ]
lno@64  @1  main    children:[@2 @3 ]
lno@64  @2  NODE TYPE  void  children:[]
lno@64  @3  NODE STMT  STMT DOMAIN  children:[@4 @8 @11 @14 @17 @21 ]
lno@66  @4  NODE STMT  STMT DECL  children:[@5 @6 @7 ]
lno@66  @5  NODE TYPE  int  children:[]
lno@66  @6  NODE VAR  var name: a  children:[]
lno@66  @7  NODE VAR  var name: s  children:[]
lno@67  @8  NODE STMT  =  children:[@9 @10 ]
lno@67  @9  NODE VAR  var name: a  children:[]
lno@67  @10  NODE CONST  int: 10  children:[]
lno@68  @11  NODE STMT  =  children:[@12 @13 ]
lno@68  @12  NODE VAR  var name: s  children:[]
lno@68  @13  NODE CONST  int: 0  children:[]
lno@69  @14  NODE STMT  STMT DECL  children:[@15 @16 ]
lno@69  @15  NODE TYPE  char  children:[]
lno@69  @16  NODE VAR  var name: ch  children:[]
lno@70  @17  NODE STMT  scanf  children:[@18 @19 ]
lno@70  @18  NODE CONST  string: "\%d"  children:[]
lno@70  @19  NODE CONST  &:   children:[@20 ]
lno@70  @20  NODE VAR  var name: ch  children:[]
lno@70  @21  NODE STMT  STMT WHILE  children:[@22 ]
lno@70  @22  NODE STMT  STMT DOMAIN  children:[@23 @41 @44 @47 @50 @53 ]
lno@71  @23  NODE EXPR  OP: ||  children:[@24 @31 ]
lno@71  @24  NODE EXPR  OP: &&  children:[@25 @28 ]
lno@71  @25  NODE EXPR  OP: >  children:[@26 @27 ]
lno@71  @26  NODE VAR  var name: a  children:[]
lno@71  @27  NODE CONST  int: 0  children:[]
lno@71  @28  NODE EXPR  OP: <=  children:[@29 @30 ]
lno@71  @29  NODE VAR  var name: a  children:[]
lno@71  @30  NODE CONST  int: 10  children:[]
lno@71  @31  NODE EXPR  OP: &&  children:[@32 @37 ]
lno@71  @32  NODE EXPR  OP: ==  children:[@33 @36 ]
lno@71  @33  NODE EXPR  OP: %  children:[@34 @35 ]
lno@71  @34  NODE VAR  var name: a  children:[]
lno@71  @35  NODE CONST  int: 100  children:[]
lno@71  @36  NODE CONST  int: 10  children:[]
lno@71  @37  NODE EXPR  OP: ==  children:[@38 @40 ]
lno@71  @38  NODE EXPR  OP: !  children:[@39 ]
lno@71  @39  NODE VAR  var name: a  children:[]
lno@71  @40  NODE CONST  int: 10  children:[]
lno@73  @41  NODE STMT  -=  children:[@42 @43 ]
lno@73  @42  NODE VAR  var name: a  children:[]
lno@73  @43  NODE CONST  int: 1  children:[]
lno@74  @44  NODE STMT  STMT DECL  children:[@45 @46 ]
lno@74  @45  NODE TYPE  int  children:[]
lno@74  @46  NODE VAR  var name: a  children:[]
lno@75  @47  NODE STMT  =  children:[@48 @49 ]
lno@75  @48  NODE VAR  var name: a  children:[]
lno@75  @49  NODE CONST  int: 10  children:[]
lno@76  @50  NODE STMT  +=  children:[@51 @52 ]
lno@76  @51  NODE VAR  var name: s  children:[]
lno@76  @52  NODE VAR  var name: a  children:[]
lno@76  @53  NODE STMT  STMT IF  children:[@54 ]
lno@76  @54  NODE STMT  STMT DOMAIN  children:[@55 @60 @63 @66 @69 ]
lno@77  @55  NODE EXPR  OP: <  children:[@56 @58 ]
lno@77  @56  NODE EXPR  OP: -  children:[@57 ]
lno@77  @57  NODE VAR  var name: s  children:[]
lno@77  @58  NODE EXPR  OP: -  children:[@59 ]
lno@77  @59  NODE CONST  int: 10  children:[]
lno@79  @60  NODE STMT  printf  children:[@61 @62 ]
lno@79  @61  NODE CONST  string: "result is: %d\n"  children:[]
lno@79  @62  NODE VAR  var name: s  children:[]
lno@80  @63  NODE STMT  STMT DECL  children:[@64 @65 ]
lno@80  @64  NODE TYPE  int  children:[]
lno@80  @65  NODE VAR  var name: b  children:[]
lno@81  @66  NODE STMT  =  children:[@67 @68 ]
lno@81  @67  NODE VAR  var name: b  children:[]
lno@81  @68  NODE CONST  int: 10  children:[]
lno@81  @69  NODE STMT  STMT FOR  children:[@70 ]
lno@81  @70  NODE STMT  STMT DOMAIN  children:[@71 @75 @78 @80 ]
lno@82  @71  NODE STMT  STMT DECL  children:[@72 @73 @74 ]
lno@82  @72  NODE TYPE  int  children:[]
lno@82  @73  NODE VAR  var name: i  children:[]
lno@82  @74  NODE CONST  int: 0  children:[]
lno@82  @75  NODE EXPR  OP: <  children:[@76 @77 ]
lno@82  @76  NODE VAR  var name: i  children:[]
lno@82  @77  NODE VAR  var name: b  children:[]
lno@82  @78  NODE EXPR  OP: ++  children:[@79 ]
lno@82  @79  NODE VAR  var name: i  children:[]
lno@84  @80  NODE STMT  printf  children:[@81 @82 ]
lno@84  @81  NODE CONST  string: "Have fun: %d\n"  children:[]
lno@84  @82  NODE VAR  var name: i  children:[]

