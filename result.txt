lno@0  @37  NODE PROG    children:[@1 ]
lno@52  @1  main    children:[@0 @5 @8 @11 @14 @36 ]
lno@52  @0  NODE TYPE  void  children:[]
lno@53  @5  NODE STMT  STMT DECL  children:[@2 @3 @4 ]
lno@53  @2  NODE TYPE  int  children:[]
lno@53  @3  NODE VAR  var name: a  children:[]
lno@53  @4  NODE VAR  var name: s  children:[]
lno@54  @8  NODE STMT  =  children:[@6 @7 ]
lno@54  @6  NODE VAR  var name: a  children:[]
lno@54  @7  NODE CONST  int: 10  children:[]
lno@55  @11  NODE STMT  =  children:[@9 @10 ]
lno@55  @9  NODE VAR  var name: s  children:[]
lno@55  @10  NODE CONST  int: 0  children:[]
lno@56  @14  NODE STMT  STMT DECL  children:[@12 @13 ]
lno@56  @12  NODE TYPE  char  children:[]
lno@56  @13  NODE VAR  var name: ch  children:[]
lno@56  @36  NODE STMT  STMT WHILE  children:[@22 @35 ]
lno@57  @22  NODE EXPR  OP: ||  children:[@18 @28 ]
lno@57  @18  NODE EXPR  OP: &&  children:[@16 @20 ]
lno@57  @16  NODE EXPR  OP: >  children:[@15 @17 ]
lno@57  @15  NODE VAR  var name: a  children:[]
lno@57  @17  NODE CONST  int: 0  children:[]
lno@57  @20  NODE EXPR  OP: <=  children:[@19 @21 ]
lno@57  @19  NODE VAR  var name: a  children:[]
lno@57  @21  NODE CONST  int: 10  children:[]
lno@57  @28  NODE EXPR  OP: &&  children:[@26 @31 ]
lno@57  @26  NODE EXPR  OP: ==  children:[@24 @27 ]
lno@57  @24  NODE EXPR  OP: %  children:[@23 @25 ]
lno@57  @23  NODE VAR  var name: a  children:[]
lno@57  @25  NODE CONST  int: 100  children:[]
lno@57  @27  NODE CONST  int: 10  children:[]
lno@57  @31  NODE EXPR  OP: ==  children:[@29 @32 ]
lno@57  @29  NODE EXPR  OP: !  children:[@30 ]
lno@57  @30  NODE VAR  var name: a  children:[]
lno@57  @32  NODE CONST  int: 10  children:[]
lno@59  @35  NODE STMT  -=  children:[@33 @34 ]
lno@59  @33  NODE VAR  var name: a  children:[]
lno@59  @34  NODE CONST  int: 1  children:[]
