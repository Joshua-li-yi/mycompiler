lno@0  @0  NODE PROG    children:[@1 @4 @7 ]
lno@84  @1  NODE STMT  STMT DECL  children:[@2 @3 ]
lno@84  @2  NODE TYPE  int  children:[]
lno@84  @3  NODE VAR  var name: c  children:[]
lno@86  @4  NODE STMT  printf  children:[@5 ]
lno@86  @5  NODE EXPR  OP: &  children:[@6 ]
lno@86  @6  NODE VAR  var name: c  children:[]
lno@88  @7  NODE STMT  STMT VAR INIT  children:[@8 @10 @11 ]
lno@88  @8  NODE TYPE  int  children:[@9 ]
lno@88  @9  NODE EXPR  OP: *  children:[]
lno@88  @10  NODE VAR  var name: b  children:[]
lno@88  @11  NODE EXPR  OP: EXPR combine  children:[@12 ]
lno@88  @12  NODE EXPR  OP: &  children:[@13 ]
lno@88  @13  NODE VAR  var name: c  children:[]

==========symbol table=======
name: c token: 3 type: 0
name: b token: 10 type: 0
===========================
	   Operator   	arg1	arg2	result
0	  VAR_DECL  	-	-	c	
1	  CITE  	c	-	t0	
2	  POINTER  	t0	-	b	
# your asm code header here
_c:
	.zero	4
	.align	4
_b:
	.zero	4
	.align	4


# your asm code here
	.text
	.globl _start
