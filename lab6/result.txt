lno@0  @0  NODE PROG    children:[@1 @4 @8 ]
lno@84  @1  NODE STMT  STMT DECL  children:[@2 @3 ]
lno@84  @2  NODE TYPE  int  children:[]
lno@84  @3  NODE VAR  var name: c  children:[]
lno@86  @4  NODE STMT  printf  children:[@5 ]
lno@86  @5  NODE EXPR  OP: EXPR combine  children:[@6 ]
lno@86  @6  NODE EXPR  OP: &  children:[@7 ]
lno@86  @7  NODE VAR  var name: c  children:[]
lno@88  @8  NODE STMT  STMT VAR INIT  children:[@9 @11 @12 ]
lno@88  @9  NODE TYPE  int  children:[@10 ]
lno@88  @10  NODE EXPR  OP: *  children:[]
lno@88  @11  NODE VAR  var name: b  children:[]
lno@88  @12  NODE EXPR  OP: EXPR combine  children:[@13 ]
lno@88  @13  NODE EXPR  OP: &  children:[@14 ]
lno@88  @14  NODE VAR  var name: c  children:[]

==========symbol table=======
name: c token: 3 type: 0
name: b token: 11 type: 0
===========================
	   Operator   	arg1	arg2	result
0	VAR_DECL		-	-	c	
1	PRINTF		-	-	-	
2	CITE		c	-	t0	
3	POINTER		t0	-	b	

# your asm code header here
	.file	./src/tree.cpp
	.text
	.bss
	.global	c
	.align	4
	.type	c, @object
c:
	.zero	4
	.global	b
	.align	4
	.type	b, @object
b:
	.zero	4
	.data
	.global	t0
	.align	4
	.type	t0, @object
t0:
	.zero	4


# your asm code here
	.text
	.globl main
	.type	main, @function
main:
	pushl	%ebp
	movl	%esp, %ebp

	call	printf
	addl	$16, %esp
	movl	c, t0
	ret
	.section	.note.GNU-stack,,@progbits
