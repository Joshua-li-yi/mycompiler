lno@0  @0  NODE PROG    children:[@1 @4 ]
lno@1  @1  NODE STMT  STMT DECL  children:[@2 @3 ]
lno@1  @2  NODE TYPE  int  children:[]
lno@1  @3  NODE VAR  var name: a  children:[]
lno@2  @4  main    children:[@5 @6 ]
lno@2  @5  NODE TYPE  int  children:[]
lno@2  @6  NODE STMT  STMT DOMAIN  children:[@7 @13 @23 @28 ]
lno@4  @7  NODE STMT  scanf  children:[@8 @10 ]
lno@4  @8  NODE EXPR  OP: EXPR combine  children:[@9 ]
lno@4  @9  NODE CONST  string: "%d"  children:[]
lno@4  @10  NODE EXPR  OP: EXPR combine  children:[@11 ]
lno@4  @11  NODE EXPR  OP: &  children:[@12 ]
lno@4  @12  NODE VAR  var name: a  children:[]
lno@4  @13  NODE STMT  STMT IF  children:[@14 @18 ]
lno@4  @14  NODE EXPR  OP: EXPR combine  children:[@15 ]
lno@5  @15  NODE EXPR  OP: >  children:[@16 @17 ]
lno@5  @16  NODE VAR  var name: a  children:[]
lno@5  @17  NODE CONST  int: 0  children:[]
lno@4  @18  NODE STMT  STMT DOMAIN  children:[@19 ]
lno@7  @19  NODE STMT  -=  children:[@20 @21 ]
lno@7  @20  NODE VAR  var name: a  children:[]
lno@7  @21  NODE EXPR  OP: EXPR combine  children:[@22 ]
lno@7  @22  NODE CONST  int: 20  children:[]
lno@9  @23  NODE STMT  printf  children:[@24 @26 ]
lno@9  @24  NODE EXPR  OP: EXPR combine  children:[@25 ]
lno@9  @25  NODE CONST  string: "test:%d\n"  children:[]
lno@9  @26  NODE EXPR  OP: EXPR combine  children:[@27 ]
lno@9  @27  NODE VAR  var name: a  children:[]
lno@10  @28  NODE STMT  STMT RETURN  children:[@29 ]
lno@10  @29  NODE EXPR  OP: EXPR combine  children:[@30 ]
lno@10  @30  NODE CONST  int: 0  children:[]

==========symbol table=======
name: a token: 3 type: 0
name: main token: 4 type: 1
name: .LC0 token: 9 type: 10
name: .LC1 token: 25 type: 10
===========================
	   Operator   	arg1	arg2	result
0	VAR_DECL		-	-	a	
1	MAIN		-	-	main	
2	CITE		a	-	t0	
3	PUSH		-	-	t0	
4	PUSH		-	-	.LC0	
5	SCANF		-	-	-	
6	GTR		a	0	t1	
7	IF		-	-	t1	
8	JLE		-	-	.L0:	
9	MINUS		a	20	a	
10	LABEL		-	-	.L0:	
11	ASSIGN		a	-	t2	
12	PUSH		-	-	t2	
13	PUSH		-	-	.LC1	
14	PRINTF		-	-	-	
15	RETURN		-	-	-	

# your asm code header here
	.file	./src/tree.cpp
	.text
	.bss
	.global	a
	.align	4
	.type	a, @object
a:
	.zero	4
	.section	.rodata
.LC0:
	.string	"%d"
.LC1:
	.string	"test:%d\n"


# your asm code here
	.text
	.globl main
	.type	main, @function
main:
	pushl	%ebp
	movl	%esp, %ebp

	subl	$8, %esp
	pushl	$t0
	pushl	$.LC0
	call	scanf
	addl	$16, %esp
	movl	a, t2
	subl	$8, %esp
	pushl	$t2
	pushl	$.LC1
	call	printf
	addl	$16, %esp
	movl	$0, %eax
	popl	%ebp
	ret
	.section	.note.GNU-stack,,@progbits
