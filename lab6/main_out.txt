lno@0  @0  NODE PROG    children:[@1 @4 ]
lno@1  @1  NODE STMT  STMT DECL  children:[@2 @3 ]
lno@1  @2  NODE TYPE  int  children:[]
lno@1  @3  NODE VAR  var name: a  children:[]
lno@2  @4  main    children:[@5 @6 ]
lno@2  @5  NODE TYPE  int  children:[]
lno@2  @6  NODE STMT  STMT DOMAIN  children:[@7 @13 @18 ]
lno@4  @7  NODE STMT  scanf  children:[@8 @10 ]
lno@4  @8  NODE EXPR  OP: EXPR combine  children:[@9 ]
lno@4  @9  NODE CONST  string: "%d"  children:[]
lno@4  @10  NODE EXPR  OP: EXPR combine  children:[@11 ]
lno@4  @11  NODE EXPR  OP: &  children:[@12 ]
lno@4  @12  NODE VAR  var name: a  children:[]
lno@5  @13  NODE STMT  printf  children:[@14 @16 ]
lno@5  @14  NODE EXPR  OP: EXPR combine  children:[@15 ]
lno@5  @15  NODE CONST  string: "test:%d\n"  children:[]
lno@5  @16  NODE EXPR  OP: EXPR combine  children:[@17 ]
lno@5  @17  NODE VAR  var name: a  children:[]
lno@6  @18  NODE STMT  STMT RETURN  children:[@19 ]
lno@6  @19  NODE EXPR  OP: EXPR combine  children:[@20 ]
lno@6  @20  NODE CONST  int: 0  children:[]

==========symbol table=======
name: a token: 3 type: 0
name: main token: 4 type: 1
name: .LC0 token: 9 type: 10
name: .LC1 token: 15 type: 10
===========================
	   Operator   	arg1	arg2	result
0	VAR_DECL		-	-	a	
1	MAIN		-	-	main	
2	CITE		a	-	t0	
3	PUSH		-	-	t0	
4	PUSH		-	-	.LC0	
5	SCANF		-	-	-	
6	ASSIGN		a	-	t1	
7	PUSH		-	-	t1	
8	PUSH		-	-	.LC1	
9	PRINTF		-	-	-	
10	RETURN		-	-	-	

# your asm code header here
	.file	./src/tree.cpp
	.text
	.bss
	.global	a
	.align	4
	.type	a, @object
a:
	.zero	4
	.section	.rodata
.LC0:
	.string	"%d"
.LC1:
	.string	"test:%d\n"
	.data
	.global	t0
	.align	4
	.type	t0, @object
t0:
	.zero	4
	.global	t1
	.align	4
	.type	t1, @object
t1:
	.zero	4


# your asm code here
	.text
	.globl main
	.type	main, @function
main:
	pushl	%ebp
	movl	%esp, %ebp

	subl	$8, %esp
	pushl	t0
	pushl	.LC0
	call	scanf
	addl	$16, %esp
	movl	a, t1
	subl	$8, %esp
	pushl	t1
	pushl	.LC1
	call	printf
	addl	$16, %esp
	movl	$0, %eax
	popl	%ebp
	ret
	.section	.note.GNU-stack,,@progbits
