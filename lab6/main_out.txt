lno@0  @0  NODE PROG    children:[@1 ]
lno@1  @1  main    children:[@2 @3 ]
lno@1  @2  NODE TYPE  int  children:[]
lno@1  @3  NODE STMT  STMT DOMAIN  children:[@4 @7 ]
lno@3  @4  NODE STMT  printf  children:[@5 ]
lno@3  @5  NODE EXPR  OP: EXPR combine  children:[@6 ]
lno@3  @6  NODE CONST  string: "test\n"  children:[]
lno@4  @7  NODE STMT  STMT RETURN  children:[@8 ]
lno@4  @8  NODE EXPR  OP: EXPR combine  children:[@9 ]
lno@4  @9  NODE CONST  int: 0  children:[]

==========symbol table=======
name: main token: 1 type: 1
name: .LC0 token: 6 type: 10
===========================
	   Operator   	arg1	arg2	result
0	  MAIN  	-	-	main	
1	  PUSH  	-	-	.LC0	
2	  PRINTF  	-	-	-	
3	    RETURN    	-	-	-	
# your asm code header here
	.file	./src/tree.cpp
	.text
	.bss
	.section	.rodata
.LC0:
	.string	"test\n"


# your asm code here
	.text
	.globl main
	.type	main, @function
main:
	pushl	%ebp
	movl	%esp, %ebp

	movl	$0, %eax
	popl	%ebp
	ret
	.section	.note.GNU-stack,,@progbits
